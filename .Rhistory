library(tensorflow)
library(reticulate)
library(tensorflow)
library(reticulate)
py_config()
py_config()
library(reticulate)
py_config()
library(tensorflow)
conda create -n LSTM python=3.11 tensorflow
py_config()
library(tensorflow)
library(reticulate)
py_config()
install_tensorflow(envname = "env_name")
library(tensorflow)
py_config()
tf$constant("Hello Tensorflow!")
library(tensorflow)
library(reticulate)
py_config()
library(tensorflow)
py_config()
library(tensorflow)
use_condaenv(condaenv = "env_name",required = T)
py_config()
library(reticulate)
py_config()
tf$constant("Hello Tensorflow!")
library(tensorflow)
use_condaenv(condaenv = "env_name",required = T)
library(reticulate)
tf$constant("Hello Tensorflow!")
shiny::runApp()
?box
runApp()
?plotOutput
runApp()
runApp()
runApp()
time.series.tweets
time.series.tweets
runApp()
time.series.tweets <- ggplot(Countoftweets, aes(x=date, y=count, group = 1)) +
geom_line(color="#F52C65", linewidth=0.5) +
theme_minimal() +
xlab("") +
labs(
title = "Temporal count of COVID-19 Vaccine tweets",
caption = "Source: Twitter"
)
time.series.tweets
time.series.tweets <- ggplot(Countoftweets, aes(x=date, y=count)) +
geom_line(color="#F52C65", linewidth=0.5) +
theme_minimal() +
xlab("") +
labs(
title = "Temporal count of COVID-19 Vaccine tweets",
caption = "Source: Twitter"
)
time.series.tweets
time.series.tweets <- ggplot(Countoftweets, aes(x=date, y=count, group=1)) +
geom_line(color="#F52C65", linewidth=0.5) +
theme_minimal() +
xlab("") +
labs(
title = "Temporal count of COVID-19 Vaccine tweets",
caption = "Source: Twitter"
)
time.series.tweets
# Libraries ####
library(tidyverse)
library(splitstackshape)
library(tm)
library(tidymodels)
library(tidytext)
library(textrecipes)
library(ggwordcloud)
library(textdata)
library(saotd)
library(syuzhet)
library(stringr)
library(lubridate)
time.series.tweets <- ggplot(Countoftweets, aes(x=date, y=count)) +
geom_line(color="#F52C65", linewidth=0.5) +
theme_minimal() +
xlab("") +
labs(
title = "Temporal count of COVID-19 Vaccine tweets",
caption = "Source: Twitter"
)
time.series.tweets
Countoftweets <- Data %>%
select(date) %>%
group_by(date) %>%
summarise(count = n())
Countoftweets
str(Data)
Data <- read.csv("Data/Tweets2.csv")
Data$date <- as.Date(Data$date, "%d/%m/%Y")
str(Data)
Countoftweets <- Data %>%
select(date) %>%
group_by(date) %>%
summarise(count = n())
Countoftweets
time.series.tweets <- ggplot(Countoftweets, aes(x=date, y=count)) +
geom_line(color="#F52C65", linewidth=0.5) +
theme_minimal() +
xlab("") +
labs(
title = "Temporal count of COVID-19 Vaccine tweets",
caption = "Source: Twitter"
)
time.series.tweets
shiny::runApp()
shiny::runApp()
?bigram_network
bigram.network <- bigram_network(bigram.df, node_color = "red", set_seed = 1234, layout = "randomly", number = 70)
bigram.network
?bigram_network
bigram.network <- bigram_network(bigram.df, node_color = "red", set_seed = 1234, layout = "graphopt", number = 70)
bigram.network
bigram.network <- bigram_network(bigram.df, node_color = "red", set_seed = 1234, layout = "dh", number = 70)
bigram.network
runApp()
runApp()
shiny::runApp()
shiny::runApp()
Hashtags <- Hashtags %>%
na.omit() %>%
rename(Hashtag = Var1,
Count  = Freq)
Hashtags <- str_remove_all(Data$hashtags, "[^ \\w+]") |>
str_split(" ") |> unlist() |> table()
# convert it to a dataframe
Hashtags <- as.data.frame(Hashtags)
# Replace empty strings with NA
Hashtags[Hashtags == ''] <- NA
Hashtags <- Hashtags %>%
na.omit() %>%
rename(Hashtag = Var1,
Count  = Freq)
View(Hashtags)
Hashtags <- Hashtags %>%
na.omit() %>%
rename(Hashtag = Var1,
Count  = Freq)%>%
filter(Count>5)
rlang::last_error()
colnames(Hashtags)
Hashtags <- str_remove_all(Data$hashtags, "[^ \\w+]") |>
str_split(" ") |> unlist() |> table()
# convert it to a dataframe
Hashtags <- as.data.frame(Hashtags)
# Replace empty strings with NA
Hashtags[Hashtags == ''] <- NA
# Remove all NA's and rename the columns
Hashtags <- Hashtags %>%
na.omit() %>%
rename(Hashtag = Var1,
Count  = Freq)%>%
filter(Count>5)
wordcloudHashtags <- ggplot(data = Hashtags,
aes(label = Hashtag, size = Count, col = as.character(Count))) +
geom_text_wordcloud(rm_outside = TRUE, max_steps = 1,
grid_size = 1, eccentricity = .9)+
scale_size_area(max_size = 13)+
# scale_color_brewer(palette = "Paired", direction = -1)+
theme_void()
wordcloudHashtags
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
# Extract frequency of hashtags
Hashtags <- str_remove_all(Data$hashtags, "[^ \\w+]") |>
str_split(" ") |> unlist() |> table()
# convert it to a dataframe
Hashtags <- as.data.frame(Hashtags)
# Replace empty strings with NA
Hashtags[Hashtags == ''] <- NA
# Remove all NA's and rename the columns
Hashtags <- Hashtags %>%
na.omit() %>%
rename(Hashtag = Var1,
Count  = Freq)%>%
filter(Count>2)
runApp()
runApp()
install.packages("DT")
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
View(bigram.df)
install.packages("ggraph")
install.packages("ggraph")
library(ggraph)
View(bigram.df)
install.packages("igraph")
install.packages("igraph")
library(igraph)
ggraph(bigram.df, layout = "fr") +
geom_edge_link()+
geom_node_point()+
geom_node_text(aes(label=name),vjust = 1, hjust = 1)
ggraph(bigram.df, layout = "fr") +
geom_edge_link()+
geom_node_point()+
geom_node_text(aes(label=name),vjust = 1, hjust = 1)+
theme_minimal()
?bigram.network
?bigram_network
bigram.network <- bigram_network(bigram.df, node_color = "red", set_seed = 1234, layout = "fr", number = 70)
bigram.network
bigram.network <- bigram_network(bigram.df, edge_color = "#00B39A" , node_color = "#F05F1D", set_seed = 1234, layout = "fr", number = 70)
bigram.network
runApp()
runApp()
runApp()
runApp()
runApp()
loc.sentiscore <- ggplot(location.senti.score, aes(reorder(id, -total_score), total_score, fill=sentiment)) +
geom_col() +
# theme_minimal() +
theme_void() +
labs(x ="", y="score", title = "Sentiment scores per location", caption = "Source: Twitter") +
theme(legend.position = "bottom",
legend.title = element_blank(),
axis.text.x = element_text(angle = 30, vjust = 0.5, hjust = 1))+
geom_text(aes(label = total_score), vjust = -0.5, size = 3)
loc.sentiscore
runApp()
?renderDT
runApp()
runApp()
?renderDT
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
